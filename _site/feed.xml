<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-11T14:11:17+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">BZ Nomad</title><subtitle>TzuMinHuang 的個人網站：履歷、作品、技術與語言學習</subtitle><author><name>TzuMin Huang</name></author><entry><title type="html">NLP × 電商 Chatbot 混合應用學習筆記：從規劃開始打造智慧助理</title><link href="http://localhost:4000/blog/web-chat-3/" rel="alternate" type="text/html" title="NLP × 電商 Chatbot 混合應用學習筆記：從規劃開始打造智慧助理" /><published>2025-04-10T00:00:00+08:00</published><updated>2025-04-11T05:20:02+08:00</updated><id>http://localhost:4000/blog/web-chat-3</id><content type="html" xml:base="http://localhost:4000/blog/web-chat-3/"><![CDATA[<blockquote>
  <p>將自然語言處理技術應用於實際場景，是我進一步理解 NLP 模組價值與邊界的起點。這份筆記記錄我如何從系統角度出發，構思一個結合 FAQ、推薦、客服引導的智慧 Chatbot 原型系統。</p>
</blockquote>

<h2 id="-功能擴充點設計">✦ 功能擴充點設計</h2>

<h3 id="1-商品推薦模組">1. 商品推薦模組</h3>
<ul>
  <li>根據使用者問題 → 推導對應商品</li>
  <li>可結合關鍵字分類</li>
  <li>回傳格式：產品名稱、圖、價格、CTA 按鈕（引導至結帳）</li>
</ul>

<h3 id="2-對話導購流程task-oriented-dialogue">2. 對話導購流程（Task-oriented Dialogue）</h3>
<ul>
  <li>對話 slot：品項、價位、品牌、庫存篩選</li>
  <li>實作方式：Slot Filling + 回饋機制（如：篩完沒商品 → 回問是否擴大範圍）</li>
</ul>

<h3 id="3-活動推播--個人化提醒">3. 活動推播 + 個人化提醒</h3>
<ul>
  <li>根據用戶瀏覽紀錄 / 對話紀錄 → 自動推播活動商品</li>
  <li>結合推薦演算法或簡易規則判斷</li>
</ul>

<h3 id="4-訂單--出貨--售後查詢">4. 訂單 / 出貨 / 售後查詢</h3>
<ul>
  <li>結合 CRM 或訂單 API</li>
  <li>快速查詢「我的訂單」「出貨進度」「退換貨辦法」</li>
</ul>

<h2 id="-模組整合架構草圖簡述">✦ 模組整合架構草圖（簡述）</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>使用者輸入 → 意圖分類器 → 商業任務分類器
    ↓
[ FAQ? | 推薦? | 查訂單? ]
    ↓
對應模組處理 + 上下文更新 + 回應產生
</code></pre></div></div>

<ul>
  <li>使用意圖分類器（rule / ML 皆可）當作第一關</li>
  <li>每個任務模組有各自的狀態管理與上下文處理邏輯</li>
  <li>可串接後台管理（推播活動 / 編輯對話）</li>
</ul>

<h2 id="-技術細節備忘">✦ 技術細節備忘</h2>

<ul>
  <li>對話框架：狀態機 + Slot Filling 實作</li>
  <li>對話上下文管理建議用 Redis（短期）+ DB（長期紀錄）</li>
  <li>商品資料可快取至 Elasticsearch + 設計向量查詢（類似商品找相似）</li>
  <li>可視化管理工具（自建後台）便於營運人員操作</li>
</ul>

<h2 id="-初期-mvp-切入點">✦ 初期 MVP 切入點</h2>

<ol>
  <li>FAQ + 訂單查詢（穩定性高）</li>
  <li>商品推薦（商品庫存與標籤整理清楚時）</li>
  <li>導購流程（轉單導向，加強 UI/UX 設計）</li>
  <li>推播活動（需結合用戶標籤與營銷時機）</li>
</ol>

<h2 id="-學習心得與下一步方向">✦ 學習心得與下一步方向</h2>

<ul>
  <li>不是技術越多越好，而是能否貼合電商實際營運情境</li>
  <li>對話流程應配合「用戶購物心態」設計，語言上更需要有「商業感」</li>
  <li>接下來想要導入 LLM（如 GPT API），打造：
    <ul>
      <li>內容摘要（如活動條款解釋器）</li>
      <li>商品描述簡化</li>
      <li>自動生成 FAQ 回應模板</li>
    </ul>
  </li>
</ul>

<h2 id="-結語">✦ 結語</h2>

<p>這是一場技術與商業思維的混血實驗。電商 chatbot 不該只是智慧問答工具，而是能站在業績線上的數位業務員。透過這篇筆記，我更清楚了技術與商業之間的落差，也明白了 Chatbot 的真正價值不是會「說話」，而是能「成交」。</p>]]></content><author><name>TzuMin Huang</name></author><category term="Blog" /><category term="chat" /><category term="chatbot" /><category term="nlp" /><summary type="html"><![CDATA[將自然語言處理技術應用於實際場景，是我進一步理解 NLP 模組價值與邊界的起點。這份筆記記錄我如何從系統角度出發，構思一個結合 FAQ、推薦、客服引導的智慧 Chatbot 原型系統。]]></summary></entry><entry><title type="html">我重新思考客服機器人的本質與設計——打造智慧機器人的系統規劃書</title><link href="http://localhost:4000/blog/web-chat-2/" rel="alternate" type="text/html" title="我重新思考客服機器人的本質與設計——打造智慧機器人的系統規劃書" /><published>2025-04-07T00:00:00+08:00</published><updated>2025-04-08T05:20:02+08:00</updated><id>http://localhost:4000/blog/web-chat-2</id><content type="html" xml:base="http://localhost:4000/blog/web-chat-2/"><![CDATA[<h2 id="引言">引言</h2>

<p>在上一篇〈一個智慧機器人：我的機器人學習之旅〉中，我記錄了第一版客服機器人的實作過程與學習心得。但當我走過這段旅程後，我開始思考一個更根本的問題：「一個真正有用的客服機器人，本質應該是什麼？」這篇文章將從系統設計的角度，重新審視整體需求與架構，並提出我對未來客服機器人設計的完整規劃。</p>

<hr />

<h2 id="一問題定義我們需要什麼樣的客服機器人">一、問題定義：我們需要什麼樣的客服機器人？</h2>

<ul>
  <li>客戶在什麼情境下會使用客服？</li>
  <li>為何「FAQ機器人」常常令人失望？</li>
  <li>目標：打造<strong>更接近真人客服思維邏輯的系統</strong></li>
</ul>

<blockquote>
  <p>「能夠理解上下文」、「知道什麼時候該轉真人」、「提供一致與可控的回應邏輯」才是本質。</p>
</blockquote>

<hr />

<h2 id="二核心目標與功能拆解">二、核心目標與功能拆解</h2>

<table>
  <thead>
    <tr>
      <th>功能模組</th>
      <th>說明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>FAQ 問答引擎</td>
      <td>基於分類關鍵字、自定規則或向量搜尋技術</td>
    </tr>
    <tr>
      <td>多輪對話模組</td>
      <td>保存上下文（Context）、支援 Slot Filling 與任務導向對話</td>
    </tr>
    <tr>
      <td>人工客服轉接</td>
      <td>判斷時機轉接並保留歷史對話與上下文</td>
    </tr>
    <tr>
      <td>系統管理後台</td>
      <td>FAQ 編輯、分類標籤管理、日誌查詢</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="三技術選型與架構設計">三、技術選型與架構設計</h2>

<h3 id="技術棧">技術棧：</h3>
<ul>
  <li>html + css + javascript</li>
  <li>Spring Boot</li>
  <li>RabbitMQ</li>
  <li>PostgreSQL</li>
  <li>Redis</li>
  <li>Docker + docker-compose</li>
</ul>

<h3 id="系統分層架">系統分層架：</h3>
<ol>
  <li>客戶資料傳輸層</li>
  <li>對話狀態管理</li>
  <li>規則與策略層</li>
  <li>商業應用層</li>
</ol>

<h3 id="資料傳輸示意圖">資料傳輸示意圖</h3>
<p><img src="/assets/images/posts/data_translate.jpg" alt="data_translate" /></p>

<hr />

<h2 id="四關鍵模組設計細節">四、關鍵模組設計細節</h2>

<h3 id="1-對話狀態機conversation-state-machine">1. 對話狀態機（Conversation State Machine）</h3>
<ul>
  <li>定義狀態：初始 / 問答中 / 等待補充資訊 / 轉真人 等</li>
  <li>每個狀態對應動作與轉換條件（State Pattern）</li>
</ul>

<h3 id="2-問答模組faq-engine">2. 問答模組（FAQ Engine）</h3>
<ul>
  <li>實作方式：
    <ul>
      <li>規則式匹配（文字 + 類別 + 權重）</li>
    </ul>
  </li>
</ul>

<h3 id="3-多輪對話模組">3. 多輪對話模組</h3>
<ul>
  <li>Slot-based 設計（如：預約餐廳要收集「時間」「人數」「聯絡方式」）</li>
  <li>支援上下文補全與提問追問</li>
</ul>

<h3 id="4-人工轉接模組">4. 人工轉接模組</h3>
<ul>
  <li>轉接時機：關鍵字、罐頭回應失敗次數</li>
  <li>轉接流程：鎖定客服、推送對話紀錄、</li>
</ul>

<hr />

<h2 id="五使用者體驗與人性思維">五、使用者體驗與人性思維</h2>

<ul>
  <li>用戶其實不是要「聽機器人解釋」，而是「快速獲得解決方案」</li>
  <li>故需要：<strong>快速回應 + 不拖延的轉真人機制</strong></li>
  <li>回應語氣：避免過度冷冰冰、善用「語氣模板」</li>
</ul>

<hr />

<h2 id="六部署與監控設計">六、部署與監控設計</h2>

<ul>
  <li>日誌監控（操作與異常）</li>
  <li>指標觀測（API 成功率、客服轉接率）</li>
  <li>FAQ 點擊次數與命中率分析</li>
  <li>CI/CD（GitHub Actions + Docker）</li>
</ul>

<hr />

<h2 id="七未來發展與改版方向">七、未來發展與改版方向</h2>

<ul>
  <li>支援自然語言理解（NLU）強化對話品質</li>
  <li>將客服訓練數據轉為機器學習模型（自動標註常見意圖）</li>
  <li>支援語音 / TTS 模組</li>
  <li>OpenAI  整合（加速訓練與少樣本對話能力）</li>
</ul>

<hr />

<h2 id="結語技術只是手段本質是理解用戶">結語：技術只是手段，本質是理解用戶</h2>

<p>每一個模組的設計與選擇，是源於對「好用客服」的想像。這篇文章希望留下的不只是系統規劃，更是我對一個智慧機器人本質的重新詮釋。</p>]]></content><author><name>TzuMin Huang</name></author><category term="Blog" /><category term="chat" /><category term="chatbot" /><category term="nlp" /><summary type="html"><![CDATA[引言]]></summary></entry><entry><title type="html">從零打造一個智慧機器人：我的機器人學習之旅</title><link href="http://localhost:4000/chatbot/web-chat-1/" rel="alternate" type="text/html" title="從零打造一個智慧機器人：我的機器人學習之旅" /><published>2025-04-04T00:00:00+08:00</published><updated>2025-04-05T05:20:02+08:00</updated><id>http://localhost:4000/chatbot/web-chat-1</id><content type="html" xml:base="http://localhost:4000/chatbot/web-chat-1/"><![CDATA[<p>最近在閱讀《自然語言處理最佳實務》這本書，裡面有一章在講解「客服機器人的應用場景與技術架構」，看完之後我心裡冒出一個念頭：「不如自己來實作一套看看？」這不只是對書中概念的實驗，也是一場實戰練習。</p>

<p>我設定的第一個目標是打造一個具備基本功能的客服對話系統，包含：</p>
<ul>
  <li>FAQ 查詢回答</li>
  <li>支援轉接真人客服</li>
</ul>

<p>技術上，我採用了自己熟悉的技術棧：</p>
<ul>
  <li>Spring Boot 作為主架構</li>
  <li>RabbitMQ 負責模組解耦與訊息分發</li>
  <li>PostgreSQL 儲存對話紀錄與知識資料</li>
  <li>Docker 協助環境部署與管理</li>
  <li>Redis 資料快取</li>
</ul>

<p>書本提到的機器人框架</p>
<ul>
  <li>Rasa</li>
</ul>

<p>第一版很快就做出來了，但……效果並不如我預期的好。</p>

<h2 id="做完第一版我學到什麼">做完第一版，我學到什麼？</h2>

<p>雖然功能完成了，但整體對話體驗不夠自然、有些僵硬，也難以應對複雜或模糊的問題。這讓我開始認真思考一件事：</p>

<blockquote>
  <p>「客服機器人，到底該怎麼對話？」</p>
</blockquote>

<p>在這過程中，我逐漸意識到，客服對話其實就是模仿人與人之間的溝通流程：</p>
<ul>
  <li>你說一句話、系統一句話，並繞著一個主題</li>
  <li>使用者提出意圖、系統嘗試理解並給出回應</li>
  <li>解決一個問題，再進入下一個問題</li>
</ul>

<p>乍看之下很簡單，但實際情況卻複雜得多。使用者有可能：</p>
<ul>
  <li>話題跳來跳去</li>
  <li>一次輸入多個問題</li>
  <li>無法清楚描述問題本身</li>
  <li>中途修改原本的問題</li>
</ul>

<p>因此，我重新審視整體架構，決定設計第二版，一個<strong>更接近「人類對話邏輯」的系統</strong>。</p>

<h2 id="我眼中的客服系統核心邏輯">我眼中的客服系統核心邏輯</h2>

<p>要讓一個對話機器人有「對話能力」，我認為需要具備以下幾個核心模組：</p>

<h3 id="1-更強的意圖辨識intent-detection">1. 更強的意圖辨識（Intent Detection）</h3>
<p>我們要能辨識使用者是要查詢資訊、投訴、詢問訂單進度，還是只是說「你好」。不同意圖決定了回應策略與流程走向。</p>

<h3 id="2-對話狀態管理state-management">2. 對話狀態管理（State Management）</h3>
<p>對話不是 stateless 的，系統需要知道現在對話進行到哪，例如：</p>
<ul>
  <li>使用者剛提問，但還未處理</li>
  <li>目前正在等待使用者補充資料</li>
  <li>進入詢問流程中，客戶有臨時有不一樣的想法</li>
</ul>

<p>這可以用有限狀態機或上下文物件來管理。</p>

<h3 id="3-回應策略response-strategy">3. 回應策略（Response Strategy）</h3>
<p>不管是從 FAQ、資料庫、還是 AI 模型產生回應，核心是「用什麼邏輯找出最合理的回覆方式」。</p>

<h3 id="4-多輪對話處理multi-turn">4. 多輪對話處理（Multi-turn）</h3>
<p>簡單的問答不難，難的是使用者說「那上次訂單呢？」這時系統要能記住前文，知道「上次」是什麼意思。</p>

<h3 id="5-fallback--真人轉接">5. Fallback &amp; 真人轉接</h3>
<p>當機器無法理解或解決問題時，要有退路。這可能是請使用者重說、顯示常見問題、或直接轉真人客服。</p>

<h2 id="下一步我打算這樣設計第二版">下一步：我打算這樣設計第二版</h2>

<p>第二版我會從這幾個方向開始著手：</p>

<ul>
  <li>加入意圖分類器（規則 or 模型）</li>
  <li>建構一套會記憶對話上下文的管理模組</li>
  <li>將流程抽象化為任務狀態 + 回應策略</li>
  <li>儲存對話快照，確保多輪能續接</li>
  <li>加入 fallback 模組，預設五秒內無回應就自動轉接</li>
</ul>

<p>這將是一套「從流程出發設計的客服系統」，不只是跑得動，更希望能「聊得通」。</p>

<h2 id="結語">結語</h2>

<p>這段過程讓我意識到，客服機器人不只是 NLP 應用，它其實是一門關於「理解人、引導人、回應人」的工程。從第一版的碰壁到第二版的規劃，我學到最重要的一件事是：</p>

<blockquote>
  <p>不要只是寫功能，要設計對話。</p>
</blockquote>

<p>也希望這篇筆記能幫助和我一樣對 NLP 與系統設計有興趣的朋友們。如果你也正在做客服系統，或是想討論 NLP 設計邏輯，歡迎留言交流！</p>]]></content><author><name>TzuMin Huang</name></author><category term="Chatbot" /><category term="chat" /><category term="chatbot" /><category term="nlp" /><summary type="html"><![CDATA[最近在閱讀《自然語言處理最佳實務》這本書，裡面有一章在講解「客服機器人的應用場景與技術架構」，看完之後我心裡冒出一個念頭：「不如自己來實作一套看看？」這不只是對書中概念的實驗，也是一場實戰練習。]]></summary></entry></feed>