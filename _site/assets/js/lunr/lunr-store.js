var store = [{
        "title": "從零打造一個智慧機器人：我的機器人學習之旅",
        "excerpt":"最近在閱讀《自然語言處理最佳實務》這本書，裡面有一章在講解「客服機器人的應用場景與技術架構」，看完之後我心裡冒出一個念頭：「不如自己來實作一套看看？」這不只是對書中概念的實驗，也是一場實戰練習。 我設定的第一個目標是打造一個具備基本功能的客服對話系統，包含： FAQ 查詢回答 支援轉接真人客服 技術上，我採用了自己熟悉的技術棧： Spring Boot 作為主架構 RabbitMQ 負責模組解耦與訊息分發 PostgreSQL 儲存對話紀錄與知識資料 Docker 協助環境部署與管理 Redis 資料快取 書本提到的機器人框架 Rasa 第一版很快就做出來了，但……效果並不如我預期的好。 做完第一版，我學到什麼？ 雖然功能完成了，但整體對話體驗不夠自然、有些僵硬，也難以應對複雜或模糊的問題。這讓我開始認真思考一件事： 「客服機器人，到底該怎麼對話？」 在這過程中，我逐漸意識到，客服對話其實就是模仿人與人之間的溝通流程： 你說一句話、系統一句話，並繞著一個主題 使用者提出意圖、系統嘗試理解並給出回應 解決一個問題，再進入下一個問題 乍看之下很簡單，但實際情況卻複雜得多。使用者有可能： 話題跳來跳去 一次輸入多個問題 無法清楚描述問題本身 中途修改原本的問題 因此，我重新審視整體架構，決定設計第二版，一個更接近「人類對話邏輯」的系統。 我眼中的客服系統核心邏輯 要讓一個對話機器人有「對話能力」，我認為需要具備以下幾個核心模組： 1. 更強的意圖辨識（Intent Detection） 我們要能辨識使用者是要查詢資訊、投訴、詢問訂單進度，還是只是說「你好」。不同意圖決定了回應策略與流程走向。 2. 對話狀態管理（State Management） 對話不是 stateless 的，系統需要知道現在對話進行到哪，例如： 使用者剛提問，但還未處理 目前正在等待使用者補充資料 進入詢問流程中，客戶有臨時有不一樣的想法 這可以用有限狀態機或上下文物件來管理。 3....","categories": ["Chatbot"],
        "tags": ["chat","chatbot","nlp"],
        "url": "/chatbot/web-chat-1/",
        "teaser": null
      },{
        "title": "我重新思考客服機器人的本質與設計——打造智慧機器人的系統規劃書",
        "excerpt":"引言 在上一篇〈一個智慧機器人：我的機器人學習之旅〉中，我記錄了第一版客服機器人的實作過程與學習心得。但當我走過這段旅程後，我開始思考一個更根本的問題：「一個真正有用的客服機器人，本質應該是什麼？」這篇文章將從系統設計的角度，重新審視整體需求與架構，並提出我對未來客服機器人設計的完整規劃。 一、問題定義：我們需要什麼樣的客服機器人？ 客戶在什麼情境下會使用客服？ 為何「FAQ機器人」常常令人失望？ 目標：打造更接近真人客服思維邏輯的系統 「能夠理解上下文」、「知道什麼時候該轉真人」、「提供一致與可控的回應邏輯」才是本質。 二、核心目標與功能拆解 功能模組 說明 FAQ 問答引擎 基於分類關鍵字、自定規則或向量搜尋技術 多輪對話模組 保存上下文（Context）、支援 Slot Filling 與任務導向對話 人工客服轉接 判斷時機轉接並保留歷史對話與上下文 系統管理後台 FAQ 編輯、分類標籤管理、日誌查詢 三、技術選型與架構設計 技術棧： html + css + javascript Spring Boot RabbitMQ PostgreSQL Redis Docker + docker-compose 系統分層架： 客戶資料傳輸層 對話狀態管理 規則與策略層 商業應用層 資料傳輸示意圖 四、關鍵模組設計細節 1. 對話狀態機（Conversation State Machine） 定義狀態：初始...","categories": ["Blog"],
        "tags": ["chat","chatbot","nlp"],
        "url": "/blog/web-chat-2/",
        "teaser": null
      },{
        "title": "NLP × 電商 Chatbot 混合應用學習筆記：從規劃開始打造智慧助理",
        "excerpt":"將自然語言處理技術應用於實際場景，是我進一步理解 NLP 模組價值與邊界的起點。這份筆記記錄我如何從系統角度出發，構思一個結合 FAQ、推薦、客服引導的智慧 Chatbot 原型系統。 ✦ 功能擴充點設計 1. 商品推薦模組 根據使用者問題 → 推導對應商品 可結合關鍵字分類 回傳格式：產品名稱、圖、價格、CTA 按鈕（引導至結帳） 2. 對話導購流程（Task-oriented Dialogue） 對話 slot：品項、價位、品牌、庫存篩選 實作方式：Slot Filling + 回饋機制（如：篩完沒商品 → 回問是否擴大範圍） 3. 活動推播 + 個人化提醒 根據用戶瀏覽紀錄 / 對話紀錄 → 自動推播活動商品 結合推薦演算法或簡易規則判斷 4. 訂單 / 出貨 / 售後查詢 結合 CRM 或訂單 API 快速查詢「我的訂單」「出貨進度」「退換貨辦法」 ✦ 模組整合架構草圖（簡述）...","categories": ["Blog"],
        "tags": ["chat","chatbot","nlp"],
        "url": "/blog/web-chat-3/",
        "teaser": null
      },{
        "title": "Api-code-template",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/projects/1-Api-code-template/",
        "teaser": null
      },{
        "title": "My Gateway App",
        "excerpt":"這裡可以寫更詳細的介紹，包括圖片、技術堆疊、GitHub 連結等等。  ","categories": [],
        "tags": ["SpringBoot","Chatbot","RabbitMQ"],
        "url": "/projects/2-gateway/",
        "teaser": null
      },{
        "title": "My Chatbot App",
        "excerpt":"這裡可以寫更詳細的介紹，包括圖片、技術堆疊、GitHub 連結等等。  ","categories": [],
        "tags": ["SpringBoot","Chatbot","RabbitMQ"],
        "url": "/projects/3-chatbot/",
        "teaser": null
      }]
